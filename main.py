import json
import re
from datetime import datetime
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GET_NAME, GET_ORDER, CONFIRM_ORDER = range(3)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "orders.json"
ADMIN_ID = None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
CANCEL_KEYBOARD = ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)

def load_orders():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"orders": []}

def save_order(order_data):
    data = load_orders()
    order_data["timestamp"] = datetime.now().isoformat()
    data["orders"].append(order_data)
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=CANCEL_KEYBOARD
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏
    if not re.match(r"^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]{2,50}$", name):
        await update.message.reply_text(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:",
            reply_markup=CANCEL_KEYBOARD
        )
        return GET_NAME
    
    context.user_data['name'] = name
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    reply_keyboard = [
        ["–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –∏ —á–µ–≥–æ"]
    ]
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {name}!\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫.",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ–∫–æ, –•–ª–µ–±, –Ø–±–ª–æ–∫–∏"
        )
    )
    return GET_ORDER

async def get_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
    if order_text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_ORDER
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    order_items = [item.strip() for item in order_text.split(",")]
    valid_items = []
    
    for item in order_items:
        if item:
            if len(item) < 2 or len(item) > 50:
                await update.message.reply_text(
                    f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ '{item[:20]}...' —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ. "
                    "–î–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞: 2-50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –µ—â–µ —Ä–∞–∑:",
                    reply_markup=CANCEL_KEYBOARD
                )
                return GET_ORDER
            valid_items.append(item)
    
    if not valid_items:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=CANCEL_KEYBOARD
        )
        return GET_ORDER
    
    context.user_data['order'] = valid_items
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")
        ]
    ]
    
    order_list = "\n".join(f"‚Ä¢ {item}" for item in valid_items)
    
    await update.message.reply_text(
        f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üõí –¢–æ–≤–∞—Ä—ã:\n{order_list}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        save_order({
            "user_id": query.from_user.id,
            "name": context.user_data['name'],
            "order": context.user_data['order'],
            "username": query.from_user.username
        })
        
        await query.edit_message_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_ID:
            order_list = "\n".join(f"‚Ä¢ {item}" for item in context.user_data['order'])
            await context.bot.send_message(
                ADMIN_ID,
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                f"üë§: {context.user_data['name']} (@{query.from_user.username or 'N/A'})\n"
                f"üõí –¢–æ–≤–∞—Ä—ã:\n{order_list}"
            )
        
        return ConversationHandler.END
    
    elif query.data == "edit":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_ORDER

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    orders = load_orders()
    if not orders["orders"]:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    response = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for idx, order in enumerate(orders["orders"], 1):
        order_list = ", ".join(order["order"])
        date = datetime.fromisoformat(order["timestamp"]).strftime("%d.%m.%Y %H:%M")
        response += (
            f"üîπ –ó–∞–∫–∞–∑ #{idx}\n"
            f"üë§: {order['name']} (@{order.get('username', 'N/A')})\n"
            f"üõí: {order_list}\n"
            f"‚è∞: {date}\n\n"
        )
    
    await update.message.reply_text(response)

def main() -> None:
    application = Application.builder().token("7776130295:AAHUQiXUIXEZfpXxuGVeW89ekQIf17wqhCU").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)
            ],
            GET_ORDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_order)
            ],
            CONFIRM_ORDER: [
                CallbackQueryHandler(confirm_order)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("orders", view_orders))
    
    application.run_polling()

if __name__ == "__main__":
    main()